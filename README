NAME
    `Tickit' - Terminal Interface Construction KIT

SYNOPSIS
     use Tickit;
     use Tickit::Widget::Box;
     use Tickit::Widget::Static;

     my $tickit = Tickit->new;

     my $box = Tickit::Widget::Box->new(
        h_border => 4,
        v_border => 2,
        bg       => "green",
        child    => Tickit::Widget::Static->new(
           text     => "Hello, world!",
           bg       => "black",
           align    => "centre",
           valign   => "middle",
        ),
     );

     $tickit->set_root_widget( $box );
     $tickit->run;

DESCRIPTION
    `Tickit' is a high-level toolkit for creating full-screen terminal-based
    interactive programs. It allows programs to be written in an abstracted
    way, working with a tree of widget objects, to represent the layout of
    the interface and implement its behaviours.

    Its supported terminal features includes a rich set of rendering
    attributes (bold, underline, italic, 256-colours, etc), support for
    mouse including wheel and position events above the 224th column and
    arbitrary modified key input via libtermkey (all of these will require a
    supporting terminal as well). It also supports having multiple instances
    and non-blocking or asynchronous control.

    At the current version, this is a Perl distribution which contains some
    XS utility code, and depends on a number of other XS modules to provide
    the remaining terminal behaviours. Work is in progress at porting the
    lower level parts into a standalone C library, with the intention being
    that eventually this distribution will become an XS wrapper for that C
    library. Development releases may appear on CPAN that include the C
    library and XS wrappings of it.

CONSTRUCTOR
  $tickit = Tickit->new( %args )
    Constructs a new `Tickit' framework container object.

    Takes the following named arguments at construction time:

    term_in => IO
            IO handle for terminal input. Will default to `STDIN'.

    term_out => IO
            IO handle for terminal output. Will default to `STDOUT'.

    UTF8 => BOOL
            If defined, overrides locale detection to enable or disable
            UTF-8 mode. If not defined then this will be detected from the
            locale by using Perl's `${^UTF8LOCALE}' variable.

METHODS
  $tickit->later( $code )
    Runs the given CODE reference at some time soon in the future. It will
    not be invoked yet, but will be invoked at some point before the next
    round of input events are processed.

  $term = $tickit->term
    Returns the underlying Tickit::Term object.

  $cols = $tickit->cols
  $lines = $tickit->lines
    Query the current size of the terminal. Will be cached and updated on
    receipt of `SIGWINCH' signals.

  $tickit->bind_key( $key, $code )
    Installs a callback to invoke if the given key is pressed, overwriting
    any previous callback for the same key. The code block is invoked as

     $code->( $tickit, $key )

    If `$code' is missing or `undef', any existing callback is removed.

    As a convenience for the common application use case, the `Ctrl-C' key
    is bound to the `_STOP' method.

    To remove this binding, simply bind another callback, or remove the
    binding entirely by setting `undef'.

  $tickit->rootwin
    Returns the root Tickit::Window.

  $tickit->set_root_widget( $widget )
    Sets the root widget for the application's display. This must be a
    subclass of Tickit::Widget.

  $tickit->setup_term
    Set up the screen and generally prepare to start running

  $tickit->teardown_term
    Shut down the screen after running

  $tickit->tick
    Run a single round of IO events. Does not call `setup_term' or
    `teardown_term'.

  $tickit->run
    Calls the `setup_term' method, then processes IO events until stopped,
    by the `_STOP' method, `SIGINT', `SIGTERM' or the `Ctrl-C' key. Then
    runs the `teardown_term' method, and returns.

AUTHOR
    Paul Evans <leonerd@leonerd.org.uk>

